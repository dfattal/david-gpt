#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Pre-push Quality Assurance Hooks
echo "🚀 Running pre-push quality checks..."

protected_branch='main'
current_branch=$(git symbolic-ref HEAD | sed 's!refs\/heads\/!!')

# Additional checks for main branch pushes
if [ $current_branch = $protected_branch ]; then
  echo "🔒 Pushing to protected branch: $protected_branch"

  # Comprehensive quality check before main branch push
  echo "🧪 Running comprehensive quality validation..."

  # Check if QA orchestrator exists and run it
  if [ -f "./scripts/qa/qa-orchestrator.ts" ]; then
    echo "📊 Running QA orchestration..."
    npx tsx ./scripts/qa/qa-orchestrator.ts smoke
    if [ $? -ne 0 ]; then
      echo "❌ QA orchestration failed"
      echo "💡 Main branch requires passing QA checks"
      exit 1
    fi
  fi

  # Ensure no merge conflicts
  git diff --check
  if [ $? -ne 0 ]; then
    echo "❌ Merge conflict markers detected"
    exit 1
  fi

  # Ensure working directory is clean
  if ! git diff-index --quiet HEAD --; then
    echo "❌ Working directory not clean"
    echo "💡 Commit or stash all changes before pushing to main"
    exit 1
  fi
fi

# Performance impact check for RAG changes
CHANGED_FILES=$(git diff --name-only @{u}..HEAD)
if echo "$CHANGED_FILES" | grep -q "src/lib/rag/"; then
  echo "🧠 RAG performance impact check..."

  if [ -n "$NEXT_PUBLIC_SUPABASE_URL" ] && [ -n "$SUPABASE_SERVICE_ROLE_KEY" ]; then
    # Run performance tests if available
    if npm run test:performance > /dev/null 2>&1; then
      echo "⚡ Running performance tests..."
      npm run test:performance
      if [ $? -ne 0 ]; then
        echo "❌ Performance tests failed"
        echo "💡 RAG changes may have performance impact"
        exit 1
      fi
    fi
  else
    echo "⚠️ Supabase credentials not available, skipping performance check"
  fi
fi

# Security check for sensitive file changes
SENSITIVE_PATTERNS=".env|secrets|keys|credentials|passwords"
if echo "$CHANGED_FILES" | grep -qE "$SENSITIVE_PATTERNS"; then
  echo "🔒 Sensitive files detected in push"
  echo "⚠️ WARNING: Review sensitive file changes carefully"
  echo "📋 Changed sensitive files:"
  echo "$CHANGED_FILES" | grep -E "$SENSITIVE_PATTERNS"
  echo ""
  read -p "Continue with push? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "❌ Push cancelled by user"
    exit 1
  fi
fi

echo "✅ Pre-push quality checks completed successfully!"
echo "🚀 Push is authorized"